package com.isuwang.soa.hello.scala
import com.isuwang.soa.hello.scala.domain.serializer._;

import com.isuwang.dapeng.core._
import com.isuwang.org.apache.thrift._
import com.isuwang.org.apache.thrift.protocol._
import com.isuwang.dapeng.core.definition._

import scala.concurrent.ExecutionContext.Implicits.global
import java.util.concurrent.{CompletableFuture, Future}
import scala.compat.java8.FutureConverters._

/**
* Autogenerated by Dapeng-Code-Generator (1.2.2)
*
* DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*  @generated
**/
object HelloServiceAsyncCodec {


    case class sayHello_args(hello:com.isuwang.soa.hello.scala.domain.Hello)

    case class sayHello_result(success:String)

    class SayHello_argsSerializer extends BeanSerializer[sayHello_args]{

@throws[TException]
override def read(iprot: TProtocol): sayHello_args = {

var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
iprot.readStructBegin()

var hello: com.isuwang.soa.hello.scala.domain.Hello = null


while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

schemeField = iprot.readFieldBegin

schemeField.id match {

      case 1 =>
          schemeField.`type` match {
            case com.isuwang.org.apache.thrift.protocol.TType.STRUCT => hello = new com.isuwang.soa.hello.scala.domain.serializer.HelloSerializer().read(iprot)
            case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
    }

  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
}
}

iprot.readFieldEnd
iprot.readStructEnd

val bean = sayHello_args(hello = hello)
validate(bean)

bean
}

@throws[TException]
override def write(bean: sayHello_args, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("sayHello_args"))


    {
    val elem0 = bean.hello
    oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("hello", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
     new com.isuwang.soa.hello.scala.domain.serializer.HelloSerializer().write(elem0, oprot)
    oprot.writeFieldEnd

    }
oprot.writeFieldStop
oprot.writeStructEnd
}

@throws[TException]
override def validate(bean: sayHello_args): Unit = {

      if(bean.hello == null)
      throw new SoaException(SoaBaseCode.NotNull, "hello字段不允许为空")

        if(bean.hello != null)
        new com.isuwang.soa.hello.scala.domain.serializer.HelloSerializer().validate(bean.hello)

}


    override def toString(bean: sayHello_args): String = if(bean == null)  "null" else bean.toString
  }

    class SayHello_resultSerializer extends BeanSerializer[sayHello_result]{

    @throws[TException]
    override def read(iprot: TProtocol): sayHello_result = {

      var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
      iprot.readStructBegin

      var success : String = null

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          case 0 =>
          schemeField.`type` match {
            case com.isuwang.org.apache.thrift.protocol.TType.STRING =>  success = iprot.readString
            case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
          }
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }

        iprot.readFieldEnd
      }

      iprot.readStructEnd
      val bean = sayHello_result(success)
      validate(bean)

      bean
    }


@throws[TException]
override def write(bean: sayHello_result, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("sayHello_result"))


    {
    val elem0 = bean.success
    oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
    oprot.writeString(elem0)
    oprot.writeFieldEnd

    }
oprot.writeFieldStop
oprot.writeStructEnd
}


@throws[TException]
override def validate(bean: sayHello_result): Unit = {

      if(bean.success == null)
      throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")

}


    override def toString(bean: sayHello_result): String = if(bean == null)  "null" else bean.toString
  }

    class sayHello extends SoaFunctionDefinition.Async[com.isuwang.soa.hello.scala.service.HelloServiceAsync, sayHello_args, sayHello_result]("sayHello", new SayHello_argsSerializer(), new SayHello_resultSerializer()){

    @throws[TException]
    def apply(iface: com.isuwang.soa.hello.scala.service.HelloServiceAsync, args: sayHello_args):Future[sayHello_result] = {

      val _result = iface.sayHello(args.hello,50000).asInstanceOf[CompletableFuture[String]]
      _result.thenApply(sayHello_result(_))

    }
  }

    case class test_args(content:String)

    case class test_result()

    class Test_argsSerializer extends BeanSerializer[test_args]{

@throws[TException]
override def read(iprot: TProtocol): test_args = {

var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
iprot.readStructBegin()

var content: String = null


while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

schemeField = iprot.readFieldBegin

schemeField.id match {

      case 1 =>
          schemeField.`type` match {
            case com.isuwang.org.apache.thrift.protocol.TType.STRING => content = iprot.readString
            case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
    }

  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
}
}

iprot.readFieldEnd
iprot.readStructEnd

val bean = test_args(content = content)
validate(bean)

bean
}

@throws[TException]
override def write(bean: test_args, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("test_args"))


    {
    val elem0 = bean.content
    oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("content", com.isuwang.org.apache.thrift.protocol.TType.STRING, 1.asInstanceOf[Short]))
    oprot.writeString(elem0)
    oprot.writeFieldEnd

    }
oprot.writeFieldStop
oprot.writeStructEnd
}

@throws[TException]
override def validate(bean: test_args): Unit = {

      if(bean.content == null)
      throw new SoaException(SoaBaseCode.NotNull, "content字段不允许为空")

}


    override def toString(bean: test_args): String = if(bean == null)  "null" else bean.toString
  }

    class Test_resultSerializer extends BeanSerializer[test_result]{

    @throws[TException]
    override def read(iprot: TProtocol): test_result = {

      var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
      iprot.readStructBegin



      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          case 0 =>
          schemeField.`type` match {
            case com.isuwang.org.apache.thrift.protocol.TType.VOID =>  com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
          }
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }

        iprot.readFieldEnd
      }

      iprot.readStructEnd
      val bean = test_result()
      validate(bean)

      bean
    }


@throws[TException]
override def write(bean: test_result, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("test_result"))


oprot.writeFieldStop
oprot.writeStructEnd
}


@throws[TException]
override def validate(bean: test_result): Unit = {

}


    override def toString(bean: test_result): String = if(bean == null)  "null" else bean.toString
  }

    class test extends SoaFunctionDefinition.Async[com.isuwang.soa.hello.scala.service.HelloServiceAsync, test_args, test_result]("test", new Test_argsSerializer(), new Test_resultSerializer()){

    @throws[TException]
    def apply(iface: com.isuwang.soa.hello.scala.service.HelloServiceAsync, args: test_args):Future[test_result] = {

      val _result = iface.test(args.content,50000).asInstanceOf[CompletableFuture[Void]]
      _result.thenApply(null)

    }
  }


case class getServiceMetadata_args()

case class getServiceMetadata_result(success: String)

class GetServiceMetadata_argsSerializer extends BeanSerializer[getServiceMetadata_args] {

  @throws[TException]
  override def read(iprot: TProtocol): getServiceMetadata_args = {

    iprot.readStructBegin

    var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

    while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
      schemeField = iprot.readFieldBegin
      com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
      iprot.readFieldEnd
    }

    iprot.readStructEnd

    val bean = getServiceMetadata_args()
    validate(bean)

    bean
  }

  @throws[TException]
  override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
    validate(bean)
    oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

    oproto.writeFieldStop
    oproto.writeStructEnd
  }

  @throws[TException]
  override def validate(bean: getServiceMetadata_args): Unit = {}

  override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
}



class GetServiceMetadata_resultSerializer extends BeanSerializer[getServiceMetadata_result] {
  @throws[TException]
  override def read(iprot: TProtocol): getServiceMetadata_result = {
    iprot.readStructBegin

    var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

    var success: String = null

    while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
      schemeField = iprot.readFieldBegin

      schemeField.id match {
        case 0 =>
        schemeField.`type` match {
          case com.isuwang.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
        case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
      }
      iprot.readFieldEnd
    }

    iprot.readStructEnd
    val bean = getServiceMetadata_result(success)
    validate(bean)

    bean
  }

  @throws[TException]
  override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
    validate(bean)
    oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

    oproto.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
    oproto.writeString(bean.success)
    oproto.writeFieldEnd

    oproto.writeFieldStop
    oproto.writeStructEnd
  }

  @throws[TException]
  override def validate(bean: getServiceMetadata_result): Unit = {
    if (bean.success == null)
    throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
  }

  override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

}



class getServiceMetadata extends SoaFunctionDefinition.Async[com.isuwang.soa.hello.scala.service.HelloServiceAsync, getServiceMetadata_args, getServiceMetadata_result](
"getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {


  @throws[TException]
  override def apply(iface: com.isuwang.soa.hello.scala.service.HelloServiceAsync, args: getServiceMetadata_args): Future[getServiceMetadata_result] = {

    val result = scala.concurrent.Future {
    val source = scala.io.Source.fromInputStream(HelloServiceCodec.getClass.getClassLoader.getResourceAsStream("com.lbb.hello.service.HelloService.xml"))
    val success = source.mkString
    source.close
    getServiceMetadata_result(success)
    }
    result.toJava.toCompletableFuture

  }
}

class Processor(iface: com.isuwang.soa.hello.scala.service.HelloServiceAsync) extends
SoaServiceDefinition(iface,classOf[com.isuwang.soa.hello.scala.service.HelloServiceAsync], Processor.buildMap)

object Processor{

  type PF = SoaFunctionDefinition[com.isuwang.soa.hello.scala.service.HelloServiceAsync, _, _]

  def buildMap(): java.util.Map[String, PF] = {
    val map = new java.util.HashMap[String, PF]()
    map.put("sayHello", new sayHello)
      map.put("test", new test)

    map.put("getServiceMetadata", new getServiceMetadata)
    map
  }

}
}
